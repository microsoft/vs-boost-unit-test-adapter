//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from DOT.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class DOTParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, STRICT=11, GRAPH=12, DIGRAPH=13, NODE=14, EDGE=15, SUBGRAPH=16, 
		NUMBER=17, STRING=18, ID=19, HTML_STRING=20, COMMENT=21, LINE_COMMENT=22, 
		PREPROC=23, WS=24;
	public const int
		RULE_graph = 0, RULE_stmt_list = 1, RULE_stmt = 2, RULE_attr_stmt = 3, 
		RULE_attr_list = 4, RULE_a_list = 5, RULE_edge_stmt = 6, RULE_edgeRHS = 7, 
		RULE_edgeop = 8, RULE_node_stmt = 9, RULE_node_id = 10, RULE_port = 11, 
		RULE_subgraph = 12, RULE_id = 13;
	public static readonly string[] ruleNames = {
		"graph", "stmt_list", "stmt", "attr_stmt", "attr_list", "a_list", "edge_stmt", 
		"edgeRHS", "edgeop", "node_stmt", "node_id", "port", "subgraph", "id"
	};

	private static readonly string[] _LiteralNames = {
		null, "'{'", "'}'", "';'", "'='", "'['", "']'", "','", "'->'", "'--'", 
		"':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, "STRICT", 
		"GRAPH", "DIGRAPH", "NODE", "EDGE", "SUBGRAPH", "NUMBER", "STRING", "ID", 
		"HTML_STRING", "COMMENT", "LINE_COMMENT", "PREPROC", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DOT.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static DOTParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public DOTParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public DOTParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class GraphContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_listContext stmt_list() {
			return GetRuleContext<Stmt_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRAPH() { return GetToken(DOTParser.GRAPH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGRAPH() { return GetToken(DOTParser.DIGRAPH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRICT() { return GetToken(DOTParser.STRICT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public GraphContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_graph; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDOTListener typedListener = listener as IDOTListener;
			if (typedListener != null) typedListener.EnterGraph(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDOTListener typedListener = listener as IDOTListener;
			if (typedListener != null) typedListener.ExitGraph(this);
		}
	}

	[RuleVersion(0)]
	public GraphContext graph() {
		GraphContext _localctx = new GraphContext(Context, State);
		EnterRule(_localctx, 0, RULE_graph);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 29;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRICT) {
				{
				State = 28;
				Match(STRICT);
				}
			}

			State = 31;
			_la = TokenStream.LA(1);
			if ( !(_la==GRAPH || _la==DIGRAPH) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 33;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 1966080L) != 0) {
				{
				State = 32;
				id();
				}
			}

			State = 35;
			Match(T__0);
			State = 36;
			stmt_list();
			State = 37;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public Stmt_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDOTListener typedListener = listener as IDOTListener;
			if (typedListener != null) typedListener.EnterStmt_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDOTListener typedListener = listener as IDOTListener;
			if (typedListener != null) typedListener.ExitStmt_list(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_listContext stmt_list() {
		Stmt_listContext _localctx = new Stmt_listContext(Context, State);
		EnterRule(_localctx, 2, RULE_stmt_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 45;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 2084866L) != 0) {
				{
				{
				State = 39;
				stmt();
				State = 41;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2) {
					{
					State = 40;
					Match(T__2);
					}
				}

				}
				}
				State = 47;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Node_stmtContext node_stmt() {
			return GetRuleContext<Node_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Edge_stmtContext edge_stmt() {
			return GetRuleContext<Edge_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attr_stmtContext attr_stmt() {
			return GetRuleContext<Attr_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubgraphContext subgraph() {
			return GetRuleContext<SubgraphContext>(0);
		}
		public StmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDOTListener typedListener = listener as IDOTListener;
			if (typedListener != null) typedListener.EnterStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDOTListener typedListener = listener as IDOTListener;
			if (typedListener != null) typedListener.ExitStmt(this);
		}
	}

	[RuleVersion(0)]
	public StmtContext stmt() {
		StmtContext _localctx = new StmtContext(Context, State);
		EnterRule(_localctx, 4, RULE_stmt);
		try {
			State = 56;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 48;
				node_stmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 49;
				edge_stmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 50;
				attr_stmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 51;
				id();
				State = 52;
				Match(T__3);
				State = 53;
				id();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 55;
				subgraph();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attr_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Attr_listContext attr_list() {
			return GetRuleContext<Attr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRAPH() { return GetToken(DOTParser.GRAPH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NODE() { return GetToken(DOTParser.NODE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EDGE() { return GetToken(DOTParser.EDGE, 0); }
		public Attr_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attr_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDOTListener typedListener = listener as IDOTListener;
			if (typedListener != null) typedListener.EnterAttr_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDOTListener typedListener = listener as IDOTListener;
			if (typedListener != null) typedListener.ExitAttr_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Attr_stmtContext attr_stmt() {
		Attr_stmtContext _localctx = new Attr_stmtContext(Context, State);
		EnterRule(_localctx, 6, RULE_attr_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 53248L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 59;
			attr_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attr_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_listContext[] a_list() {
			return GetRuleContexts<A_listContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public A_listContext a_list(int i) {
			return GetRuleContext<A_listContext>(i);
		}
		public Attr_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attr_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDOTListener typedListener = listener as IDOTListener;
			if (typedListener != null) typedListener.EnterAttr_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDOTListener typedListener = listener as IDOTListener;
			if (typedListener != null) typedListener.ExitAttr_list(this);
		}
	}

	[RuleVersion(0)]
	public Attr_listContext attr_list() {
		Attr_listContext _localctx = new Attr_listContext(Context, State);
		EnterRule(_localctx, 8, RULE_attr_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 61;
				Match(T__4);
				State = 63;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 1966080L) != 0) {
					{
					State = 62;
					a_list();
					}
				}

				State = 65;
				Match(T__5);
				}
				}
				State = 68;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__4 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class A_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public A_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_a_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDOTListener typedListener = listener as IDOTListener;
			if (typedListener != null) typedListener.EnterA_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDOTListener typedListener = listener as IDOTListener;
			if (typedListener != null) typedListener.ExitA_list(this);
		}
	}

	[RuleVersion(0)]
	public A_listContext a_list() {
		A_listContext _localctx = new A_listContext(Context, State);
		EnterRule(_localctx, 10, RULE_a_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 70;
				id();
				State = 73;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__3) {
					{
					State = 71;
					Match(T__3);
					State = 72;
					id();
					}
				}

				State = 76;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__6) {
					{
					State = 75;
					Match(T__6);
					}
				}

				}
				}
				State = 80;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((_la) & ~0x3f) == 0 && ((1L << _la) & 1966080L) != 0 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Edge_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EdgeRHSContext edgeRHS() {
			return GetRuleContext<EdgeRHSContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Node_idContext node_id() {
			return GetRuleContext<Node_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubgraphContext subgraph() {
			return GetRuleContext<SubgraphContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attr_listContext attr_list() {
			return GetRuleContext<Attr_listContext>(0);
		}
		public Edge_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_edge_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDOTListener typedListener = listener as IDOTListener;
			if (typedListener != null) typedListener.EnterEdge_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDOTListener typedListener = listener as IDOTListener;
			if (typedListener != null) typedListener.ExitEdge_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Edge_stmtContext edge_stmt() {
		Edge_stmtContext _localctx = new Edge_stmtContext(Context, State);
		EnterRule(_localctx, 12, RULE_edge_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
			case STRING:
			case ID:
			case HTML_STRING:
				{
				State = 82;
				node_id();
				}
				break;
			case T__0:
			case SUBGRAPH:
				{
				State = 83;
				subgraph();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 86;
			edgeRHS();
			State = 88;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__4) {
				{
				State = 87;
				attr_list();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EdgeRHSContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EdgeopContext[] edgeop() {
			return GetRuleContexts<EdgeopContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EdgeopContext edgeop(int i) {
			return GetRuleContext<EdgeopContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Node_idContext[] node_id() {
			return GetRuleContexts<Node_idContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Node_idContext node_id(int i) {
			return GetRuleContext<Node_idContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubgraphContext[] subgraph() {
			return GetRuleContexts<SubgraphContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubgraphContext subgraph(int i) {
			return GetRuleContext<SubgraphContext>(i);
		}
		public EdgeRHSContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_edgeRHS; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDOTListener typedListener = listener as IDOTListener;
			if (typedListener != null) typedListener.EnterEdgeRHS(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDOTListener typedListener = listener as IDOTListener;
			if (typedListener != null) typedListener.ExitEdgeRHS(this);
		}
	}

	[RuleVersion(0)]
	public EdgeRHSContext edgeRHS() {
		EdgeRHSContext _localctx = new EdgeRHSContext(Context, State);
		EnterRule(_localctx, 14, RULE_edgeRHS);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 90;
				edgeop();
				State = 93;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NUMBER:
				case STRING:
				case ID:
				case HTML_STRING:
					{
					State = 91;
					node_id();
					}
					break;
				case T__0:
				case SUBGRAPH:
					{
					State = 92;
					subgraph();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				State = 97;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__7 || _la==T__8 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EdgeopContext : ParserRuleContext {
		public EdgeopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_edgeop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDOTListener typedListener = listener as IDOTListener;
			if (typedListener != null) typedListener.EnterEdgeop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDOTListener typedListener = listener as IDOTListener;
			if (typedListener != null) typedListener.ExitEdgeop(this);
		}
	}

	[RuleVersion(0)]
	public EdgeopContext edgeop() {
		EdgeopContext _localctx = new EdgeopContext(Context, State);
		EnterRule(_localctx, 16, RULE_edgeop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99;
			_la = TokenStream.LA(1);
			if ( !(_la==T__7 || _la==T__8) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Node_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Node_idContext node_id() {
			return GetRuleContext<Node_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attr_listContext attr_list() {
			return GetRuleContext<Attr_listContext>(0);
		}
		public Node_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_node_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDOTListener typedListener = listener as IDOTListener;
			if (typedListener != null) typedListener.EnterNode_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDOTListener typedListener = listener as IDOTListener;
			if (typedListener != null) typedListener.ExitNode_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Node_stmtContext node_stmt() {
		Node_stmtContext _localctx = new Node_stmtContext(Context, State);
		EnterRule(_localctx, 18, RULE_node_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101;
			node_id();
			State = 103;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__4) {
				{
				State = 102;
				attr_list();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Node_idContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PortContext port() {
			return GetRuleContext<PortContext>(0);
		}
		public Node_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_node_id; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDOTListener typedListener = listener as IDOTListener;
			if (typedListener != null) typedListener.EnterNode_id(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDOTListener typedListener = listener as IDOTListener;
			if (typedListener != null) typedListener.ExitNode_id(this);
		}
	}

	[RuleVersion(0)]
	public Node_idContext node_id() {
		Node_idContext _localctx = new Node_idContext(Context, State);
		EnterRule(_localctx, 20, RULE_node_id);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105;
			id();
			State = 107;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__9) {
				{
				State = 106;
				port();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PortContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public PortContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_port; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDOTListener typedListener = listener as IDOTListener;
			if (typedListener != null) typedListener.EnterPort(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDOTListener typedListener = listener as IDOTListener;
			if (typedListener != null) typedListener.ExitPort(this);
		}
	}

	[RuleVersion(0)]
	public PortContext port() {
		PortContext _localctx = new PortContext(Context, State);
		EnterRule(_localctx, 22, RULE_port);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			Match(T__9);
			State = 110;
			id();
			State = 113;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__9) {
				{
				State = 111;
				Match(T__9);
				State = 112;
				id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubgraphContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_listContext stmt_list() {
			return GetRuleContext<Stmt_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBGRAPH() { return GetToken(DOTParser.SUBGRAPH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public SubgraphContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subgraph; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDOTListener typedListener = listener as IDOTListener;
			if (typedListener != null) typedListener.EnterSubgraph(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDOTListener typedListener = listener as IDOTListener;
			if (typedListener != null) typedListener.ExitSubgraph(this);
		}
	}

	[RuleVersion(0)]
	public SubgraphContext subgraph() {
		SubgraphContext _localctx = new SubgraphContext(Context, State);
		EnterRule(_localctx, 24, RULE_subgraph);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SUBGRAPH) {
				{
				State = 115;
				Match(SUBGRAPH);
				State = 117;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 1966080L) != 0) {
					{
					State = 116;
					id();
					}
				}

				}
			}

			State = 121;
			Match(T__0);
			State = 122;
			stmt_list();
			State = 123;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(DOTParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(DOTParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HTML_STRING() { return GetToken(DOTParser.HTML_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(DOTParser.NUMBER, 0); }
		public IdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDOTListener typedListener = listener as IDOTListener;
			if (typedListener != null) typedListener.EnterId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDOTListener typedListener = listener as IDOTListener;
			if (typedListener != null) typedListener.ExitId(this);
		}
	}

	[RuleVersion(0)]
	public IdContext id() {
		IdContext _localctx = new IdContext(Context, State);
		EnterRule(_localctx, 26, RULE_id);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 1966080L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,24,128,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,1,0,3,0,30,
		8,0,1,0,1,0,3,0,34,8,0,1,0,1,0,1,0,1,0,1,1,1,1,3,1,42,8,1,5,1,44,8,1,10,
		1,12,1,47,9,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,57,8,2,1,3,1,3,1,3,1,
		4,1,4,3,4,64,8,4,1,4,4,4,67,8,4,11,4,12,4,68,1,5,1,5,1,5,3,5,74,8,5,1,
		5,3,5,77,8,5,4,5,79,8,5,11,5,12,5,80,1,6,1,6,3,6,85,8,6,1,6,1,6,3,6,89,
		8,6,1,7,1,7,1,7,3,7,94,8,7,4,7,96,8,7,11,7,12,7,97,1,8,1,8,1,9,1,9,3,9,
		104,8,9,1,10,1,10,3,10,108,8,10,1,11,1,11,1,11,1,11,3,11,114,8,11,1,12,
		1,12,3,12,118,8,12,3,12,120,8,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,0,
		0,14,0,2,4,6,8,10,12,14,16,18,20,22,24,26,0,4,1,0,12,13,2,0,12,12,14,15,
		1,0,8,9,1,0,17,20,135,0,29,1,0,0,0,2,45,1,0,0,0,4,56,1,0,0,0,6,58,1,0,
		0,0,8,66,1,0,0,0,10,78,1,0,0,0,12,84,1,0,0,0,14,95,1,0,0,0,16,99,1,0,0,
		0,18,101,1,0,0,0,20,105,1,0,0,0,22,109,1,0,0,0,24,119,1,0,0,0,26,125,1,
		0,0,0,28,30,5,11,0,0,29,28,1,0,0,0,29,30,1,0,0,0,30,31,1,0,0,0,31,33,7,
		0,0,0,32,34,3,26,13,0,33,32,1,0,0,0,33,34,1,0,0,0,34,35,1,0,0,0,35,36,
		5,1,0,0,36,37,3,2,1,0,37,38,5,2,0,0,38,1,1,0,0,0,39,41,3,4,2,0,40,42,5,
		3,0,0,41,40,1,0,0,0,41,42,1,0,0,0,42,44,1,0,0,0,43,39,1,0,0,0,44,47,1,
		0,0,0,45,43,1,0,0,0,45,46,1,0,0,0,46,3,1,0,0,0,47,45,1,0,0,0,48,57,3,18,
		9,0,49,57,3,12,6,0,50,57,3,6,3,0,51,52,3,26,13,0,52,53,5,4,0,0,53,54,3,
		26,13,0,54,57,1,0,0,0,55,57,3,24,12,0,56,48,1,0,0,0,56,49,1,0,0,0,56,50,
		1,0,0,0,56,51,1,0,0,0,56,55,1,0,0,0,57,5,1,0,0,0,58,59,7,1,0,0,59,60,3,
		8,4,0,60,7,1,0,0,0,61,63,5,5,0,0,62,64,3,10,5,0,63,62,1,0,0,0,63,64,1,
		0,0,0,64,65,1,0,0,0,65,67,5,6,0,0,66,61,1,0,0,0,67,68,1,0,0,0,68,66,1,
		0,0,0,68,69,1,0,0,0,69,9,1,0,0,0,70,73,3,26,13,0,71,72,5,4,0,0,72,74,3,
		26,13,0,73,71,1,0,0,0,73,74,1,0,0,0,74,76,1,0,0,0,75,77,5,7,0,0,76,75,
		1,0,0,0,76,77,1,0,0,0,77,79,1,0,0,0,78,70,1,0,0,0,79,80,1,0,0,0,80,78,
		1,0,0,0,80,81,1,0,0,0,81,11,1,0,0,0,82,85,3,20,10,0,83,85,3,24,12,0,84,
		82,1,0,0,0,84,83,1,0,0,0,85,86,1,0,0,0,86,88,3,14,7,0,87,89,3,8,4,0,88,
		87,1,0,0,0,88,89,1,0,0,0,89,13,1,0,0,0,90,93,3,16,8,0,91,94,3,20,10,0,
		92,94,3,24,12,0,93,91,1,0,0,0,93,92,1,0,0,0,94,96,1,0,0,0,95,90,1,0,0,
		0,96,97,1,0,0,0,97,95,1,0,0,0,97,98,1,0,0,0,98,15,1,0,0,0,99,100,7,2,0,
		0,100,17,1,0,0,0,101,103,3,20,10,0,102,104,3,8,4,0,103,102,1,0,0,0,103,
		104,1,0,0,0,104,19,1,0,0,0,105,107,3,26,13,0,106,108,3,22,11,0,107,106,
		1,0,0,0,107,108,1,0,0,0,108,21,1,0,0,0,109,110,5,10,0,0,110,113,3,26,13,
		0,111,112,5,10,0,0,112,114,3,26,13,0,113,111,1,0,0,0,113,114,1,0,0,0,114,
		23,1,0,0,0,115,117,5,16,0,0,116,118,3,26,13,0,117,116,1,0,0,0,117,118,
		1,0,0,0,118,120,1,0,0,0,119,115,1,0,0,0,119,120,1,0,0,0,120,121,1,0,0,
		0,121,122,5,1,0,0,122,123,3,2,1,0,123,124,5,2,0,0,124,25,1,0,0,0,125,126,
		7,3,0,0,126,27,1,0,0,0,19,29,33,41,45,56,63,68,73,76,80,84,88,93,97,103,
		107,113,117,119
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
